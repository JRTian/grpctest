// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package sporting

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SportingClient is the client API for Sporting service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SportingClient interface {
	// ListEvents will return a collection of all races.
	ListEvents(ctx context.Context, in *ListEventsRequest, opts ...grpc.CallOption) (*ListEventsResponse, error)
}

type sportingClient struct {
	cc grpc.ClientConnInterface
}

func NewSportingClient(cc grpc.ClientConnInterface) SportingClient {
	return &sportingClient{cc}
}

func (c *sportingClient) ListEvents(ctx context.Context, in *ListEventsRequest, opts ...grpc.CallOption) (*ListEventsResponse, error) {
	out := new(ListEventsResponse)
	err := c.cc.Invoke(ctx, "/sporting.Sporting/ListEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SportingServer is the server API for Sporting service.
// All implementations must embed UnimplementedSportingServer
// for forward compatibility
type SportingServer interface {
	// ListEvents will return a collection of all races.
	ListEvents(context.Context, *ListEventsRequest) (*ListEventsResponse, error)
	mustEmbedUnimplementedSportingServer()
}

// UnimplementedSportingServer must be embedded to have forward compatible implementations.
type UnimplementedSportingServer struct {
}

func (UnimplementedSportingServer) ListEvents(context.Context, *ListEventsRequest) (*ListEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEvents not implemented")
}
func (UnimplementedSportingServer) mustEmbedUnimplementedSportingServer() {}

// UnsafeSportingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SportingServer will
// result in compilation errors.
type UnsafeSportingServer interface {
	mustEmbedUnimplementedSportingServer()
}

func RegisterSportingServer(s grpc.ServiceRegistrar, srv SportingServer) {
	s.RegisterService(&Sporting_ServiceDesc, srv)
}

func _Sporting_ListEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SportingServer).ListEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sporting.Sporting/ListEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SportingServer).ListEvents(ctx, req.(*ListEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Sporting_ServiceDesc is the grpc.ServiceDesc for Sporting service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Sporting_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sporting.Sporting",
	HandlerType: (*SportingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListEvents",
			Handler:    _Sporting_ListEvents_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sporting/sporting.proto",
}
